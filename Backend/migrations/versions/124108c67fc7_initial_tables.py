"""Initial tables

Revision ID: 124108c67fc7
Revises: 
Create Date: 2025-05-09 14:14:36.460444

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '124108c67fc7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('citas')
    op.drop_table('publicaciones')
    op.drop_table('reservas_area_comun')
    op.drop_table('reconocimientos')
    op.drop_table('inscripciones_actividades')
    op.drop_table('quejas')
    op.drop_table('reservas_lavanderia')
    op.drop_table('salida_vivienda')
    op.drop_table('asistencias')
    op.drop_table('actividades')
    op.drop_table('reservas_internet')
    with op.batch_alter_table('usuarios', schema=None) as batch_op:
        batch_op.alter_column('id_usuario',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('usuarios', schema=None) as batch_op:
        batch_op.alter_column('id_usuario',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    op.create_table('reservas_internet',
    sa.Column('id_reserva', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('numero_cabina', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fecha', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('horario', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='reservas_internet_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_reserva', name='reservas_internet_pkey')
    )
    op.create_table('actividades',
    sa.Column('id_actividad', sa.INTEGER(), server_default=sa.text("nextval('actividades_id_actividad_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tipo_actividad', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('titulo', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fecha_inicio', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('fecha_fin', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('archivo_multimedia', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('estado', sa.VARCHAR(length=20), server_default=sa.text("'pendiente'::character varying"), autoincrement=False, nullable=True),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.CheckConstraint("estado::text = ANY (ARRAY['pendiente'::character varying, 'aprobada'::character varying, 'denegada'::character varying]::text[])", name='actividades_estado_check'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='actividades_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_actividad', name='actividades_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('asistencias',
    sa.Column('id_asistencia', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fecha', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('hora', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('accion', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("accion::text = ANY (ARRAY['ingreso'::character varying, 'salida'::character varying]::text[])", name='asistencias_accion_check'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='asistencias_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_asistencia', name='asistencias_pkey')
    )
    op.create_table('salida_vivienda',
    sa.Column('id_salida', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fecha_salida', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('fecha_regreso', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='salida_vivienda_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_salida', name='salida_vivienda_pkey')
    )
    op.create_table('reservas_lavanderia',
    sa.Column('id_reserva', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('numero_lavadora', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fecha', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('horario', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='reservas_lavanderia_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_reserva', name='reservas_lavanderia_pkey')
    )
    op.create_table('quejas',
    sa.Column('id_queja', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('codigo_reporte', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('asunto', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('motivo', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prueba_imagen', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fecha_registro', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('estado', sa.VARCHAR(length=20), server_default=sa.text("'Recibido'::character varying"), autoincrement=False, nullable=True),
    sa.CheckConstraint("estado::text = ANY (ARRAY['Recibido'::character varying, 'En revisión'::character varying, 'En proceso'::character varying, 'Resuelto'::character varying, 'Cerrado'::character varying]::text[])", name='quejas_estado_check'),
    sa.CheckConstraint("motivo::text = ANY (ARRAY['Robo'::character varying, 'Destrucción de bienes'::character varying, 'Ruido excesivo'::character varying, 'Falta de limpieza'::character varying, 'Problemas con instalaciones'::character varying, 'Mal comportamiento de residentes'::character varying, 'Fugas o daños estructurales'::character varying, 'Plagas o infestaciones'::character varying, 'Seguridad deficiente'::character varying, 'Incumplimiento de normativas'::character varying]::text[])", name='quejas_motivo_check'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='quejas_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_queja', name='quejas_pkey'),
    sa.UniqueConstraint('codigo_reporte', name='quejas_codigo_reporte_key')
    )
    op.create_table('inscripciones_actividades',
    sa.Column('id_inscripcion', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_actividad', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fecha_inscripcion', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_actividad'], ['actividades.id_actividad'], name='inscripciones_actividades_id_actividad_fkey'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='inscripciones_actividades_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_inscripcion', name='inscripciones_actividades_pkey')
    )
    op.create_table('reconocimientos',
    sa.Column('id_reconocimiento', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_alumno', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fecha_reconocimiento', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_alumno'], ['usuarios.id_usuario'], name='reconocimientos_id_alumno_fkey'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='reconocimientos_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_reconocimiento', name='reconocimientos_pkey')
    )
    op.create_table('reservas_area_comun',
    sa.Column('id_reserva', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lugar', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('fecha', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('horario', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='reservas_area_comun_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_reserva', name='reservas_area_comun_pkey')
    )
    op.create_table('publicaciones',
    sa.Column('id_publicacion', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('imagen', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fecha_publicacion', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='publicaciones_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_publicacion', name='publicaciones_pkey')
    )
    op.create_table('citas',
    sa.Column('id_cita', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('motivo', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('area', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fecha', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('hora_inicio', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('hora_fin', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('estado', sa.VARCHAR(length=20), server_default=sa.text("'pendiente'::character varying"), autoincrement=False, nullable=True),
    sa.Column('fecha_registro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("area::text = ANY (ARRAY['Bienestar'::character varying, 'Psicología'::character varying, 'Enfermería'::character varying, 'Académico'::character varying]::text[])", name='citas_area_check'),
    sa.CheckConstraint("estado::text = ANY (ARRAY['pendiente'::character varying, 'culminada'::character varying]::text[])", name='citas_estado_check'),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuarios.id_usuario'], name='citas_id_usuario_fkey'),
    sa.PrimaryKeyConstraint('id_cita', name='citas_pkey')
    )
    # ### end Alembic commands ###
